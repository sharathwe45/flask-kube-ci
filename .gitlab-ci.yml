stages:
  - test
  - build
  - scan
  - deploy

sast_scan:
  image: docker:stable
  stage: test
  variables:
    DOCKER_DRIVER: overlay2
  services:
    - docker:stable-dind
  script:
    - apk add py-pip
    - pip install bandit
    - bandit -r -f json -o bandit_result.json app/ || true
  artifacts:
    paths: [bandit_result.json]
    expire_in: 1 week

sca_scan:
  image: docker:stable
  stage: test
  variables:
    DOCKER_DRIVER: overlay2
  services:
    - docker:stable-dind
  script:
    - apk add py-pip
    - pip install safety PyJWT==1.5.2 requests==2.18.1 urllib3==1.21.1 itsdangerous==0.24 Jinja2==2.9.6
    - safety check --json >> safety_result.json || true
  artifacts:
    paths: [safety_result.json]
    expire_in: 1 week

docker_build:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - echo "$CI_REGISTRY_IMAGE:staging"
    - docker build --pull -t "$CI_REGISTRY_IMAGE:staging" .
    - docker push "$CI_REGISTRY_IMAGE:staging"

clair_scan:
  image: docker:stable
  stage: scan
  variables:
    DOCKER_DRIVER: overlay2
    ## Define two new variables based on GitLab's CI/CD predefined variables
    ## https://docs.gitlab.com/ee/ci/variables/#predefined-environment-variables
  allow_failure: true
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker run -d --name db arminc/clair-db:latest
    - docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:v2.0.1
    - apk add -U wget ca-certificates
    - docker pull ${CI_REGISTRY_IMAGE}:staging
    - wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
    - mv clair-scanner_linux_amd64 clair-scanner
    - chmod +x clair-scanner
    - touch clair-whitelist.yml
    - while( ! wget -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; done
    - retries=0
    - echo "Waiting for clair daemon to start"
    - while( ! wget -T 10 -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done
    - ./clair-scanner -c http://docker:6060 --ip $(hostname -i) -r clair-scan-report.json -l clair.log -w clair-whitelist.yml ${CI_REGISTRY_IMAGE}:staging || true
  artifacts:
    paths: [clair-scan-report.json]
    expire_in: 1 week

kubesec_scan:
  image: docker:stable
  variables:
    DEPLOYMENT_FILE: vul_flask-deployment.yml
  stage: scan
  services:
    - docker:dind
  script:
    - apk add curl
    - curl --silent --compressed --connect-timeout 5 -F file=@"${PWD}/${DEPLOYMENT_FILE}" https://kubesec.io/ >> kubesec_result.json
  artifacts:
    paths: [kubesec_result.json]
    expire_in: 1 week

k8s_deploy:
  image: docker:stable
  stage: deploy
  variables:
    KUBE_NAMESPACE: staging
  services:
    - docker:dind
  script:
    - apk add curl
    - mkdir -p ~/.kube
    - echo ${K8s_SECRET_CONFIG_FILE} | base64 -d > ~/.kube/config
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    - chmod +x ./kubectl
    - mv ./kubectl /usr/local/bin/kubectl
    - sed -i 's/_USER_/'"$DOCKER_ENV_GITLAB_USER_LOGIN"'/g' vul_flask-deployment.yml;
    - kubectl apply -f staging-namespace.yml
    - kubectl create secret -n $KUBE_NAMESPACE docker-registry gitlab-registry --docker-server="$CI_REGISTRY" --docker-username="$CI_REGISTRY_USER" --docker-password="$CI_REGISTRY_PASSWORD" --docker-email="$GITLAB_USER_EMAIL" --dry-run -o yaml | kubectl apply -f -
    - kubectl apply -n $KUBE_NAMESPACE -f vul_flask-deployment.yml

